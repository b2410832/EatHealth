[{"/Users/rosechen/EatHealth/eat-health/src/App.js":"1","/Users/rosechen/EatHealth/eat-health/src/index.js":"2","/Users/rosechen/EatHealth/eat-health/src/reportWebVitals.js":"3","/Users/rosechen/EatHealth/eat-health/src/Components/Header/Header.js":"4","/Users/rosechen/EatHealth/eat-health/src/Components/WriteRecipe/WriteRecipe.js":"5","/Users/rosechen/EatHealth/eat-health/src/Components/Footer/Footer.js":"6","/Users/rosechen/EatHealth/eat-health/src/Components/Ingredients/Ingredients.js":"7","/Users/rosechen/EatHealth/eat-health/src/Components/Home/Home.js":"8","/Users/rosechen/EatHealth/eat-health/src/Components/SignUp/SignUp.js":"9","/Users/rosechen/EatHealth/eat-health/src/Components/LogIn/LogIn.js":"10","/Users/rosechen/EatHealth/eat-health/src/PrivateRoute.js":"11","/Users/rosechen/EatHealth/eat-health/src/Components/RecipeList/RecipeList.js":"12","/Users/rosechen/EatHealth/eat-health/src/Components/Recipe/Recipe.js":"13","/Users/rosechen/EatHealth/eat-health/src/Components/Chart/Chart.js":"14","/Users/rosechen/EatHealth/eat-health/src/Components/Profile/Profile.js":"15","/Users/rosechen/EatHealth/eat-health/src/Components/Recipes/Recipes.js":"16","/Users/rosechen/EatHealth/eat-health/src/Components/Comments/Comments.js":"17","/Users/rosechen/EatHealth/eat-health/src/Components/RecipeListItem/RecipeListItem.js":"18","/Users/rosechen/EatHealth/eat-health/src/Components/SubProfile/SubProfile.js":"19","/Users/rosechen/EatHealth/eat-health/src/Components/FollowList/FollowList.js":"20","/Users/rosechen/EatHealth/eat-health/src/Components/Steps/Steps.js":"21","/Users/rosechen/EatHealth/eat-health/src/Components/CategoryBox/CategoryBox.js":"22","/Users/rosechen/EatHealth/eat-health/src/Components/RecommendedBox/RecommendedBox.js":"23","/Users/rosechen/EatHealth/eat-health/src/Components/Loading/Loading.js":"24","/Users/rosechen/EatHealth/eat-health/src/Components/Modal/Modal.js":"25","/Users/rosechen/EatHealth/eat-health/src/Components/Alert/Alert.js":"26","/Users/rosechen/EatHealth/eat-health/src/utils/firebase.js":"27","/Users/rosechen/EatHealth/eat-health/src/Components/UploadCoverPhoto/UploadCoverPhoto.js":"28","/Users/rosechen/EatHealth/eat-health/src/utils/firebaseConfig.js":"29"},{"size":2454,"mtime":1611125394245,"results":"30","hashOfConfig":"31"},{"size":588,"mtime":1611121568961,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":1606282798157,"results":"33","hashOfConfig":"31"},{"size":9053,"mtime":1610201095017,"results":"34","hashOfConfig":"31"},{"size":11211,"mtime":1610861494334,"results":"35","hashOfConfig":"31"},{"size":298,"mtime":1609723130403,"results":"36","hashOfConfig":"31"},{"size":3108,"mtime":1610287811525,"results":"37","hashOfConfig":"31"},{"size":10095,"mtime":1610287811524,"results":"38","hashOfConfig":"31"},{"size":3989,"mtime":1610287811533,"results":"39","hashOfConfig":"31"},{"size":3781,"mtime":1611125343210,"results":"40","hashOfConfig":"31"},{"size":396,"mtime":1609723130433,"results":"41","hashOfConfig":"31"},{"size":3387,"mtime":1609723130418,"results":"42","hashOfConfig":"31"},{"size":13882,"mtime":1610941319641,"results":"43","hashOfConfig":"31"},{"size":597,"mtime":1610201095008,"results":"44","hashOfConfig":"31"},{"size":5035,"mtime":1610287811527,"results":"45","hashOfConfig":"31"},{"size":3022,"mtime":1610287811531,"results":"46","hashOfConfig":"31"},{"size":5772,"mtime":1610201095009,"results":"47","hashOfConfig":"31"},{"size":2009,"mtime":1610201095021,"results":"48","hashOfConfig":"31"},{"size":647,"mtime":1609723130429,"results":"49","hashOfConfig":"31"},{"size":4741,"mtime":1609723130401,"results":"50","hashOfConfig":"31"},{"size":3748,"mtime":1609723130428,"results":"51","hashOfConfig":"31"},{"size":1372,"mtime":1609723130396,"results":"52","hashOfConfig":"31"},{"size":1680,"mtime":1609723130425,"results":"53","hashOfConfig":"31"},{"size":214,"mtime":1610201095019,"results":"54","hashOfConfig":"31"},{"size":590,"mtime":1610272644057,"results":"55","hashOfConfig":"31"},{"size":486,"mtime":1609723130394,"results":"56","hashOfConfig":"31"},{"size":7803,"mtime":1611125445754,"results":"57","hashOfConfig":"31"},{"size":1185,"mtime":1609723130430,"results":"58","hashOfConfig":"31"},{"size":779,"mtime":1611125304465,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"17pns1l",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"73"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"73"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"69"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rosechen/EatHealth/eat-health/src/App.js",["132"],"/Users/rosechen/EatHealth/eat-health/src/index.js",[],"/Users/rosechen/EatHealth/eat-health/src/reportWebVitals.js",[],["133","134"],"/Users/rosechen/EatHealth/eat-health/src/Components/Header/Header.js",[],["135","136"],"/Users/rosechen/EatHealth/eat-health/src/Components/WriteRecipe/WriteRecipe.js",["137"],"import { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { uploadImageToStorage, postRecipe } from \"../../utils/firebase\";\nimport styles from \"./WriteRecipe.module.scss\";\nimport tipsBulb from \"../../images/tips-bulb.svg\";\nimport defaultImg from \"../../images/upload.png\";\n\nimport UploadCoverPhoto from \"../UploadCoverPhoto/UploadCoverPhoto\";\nimport Ingredients from \"../Ingredients/Ingredients\";\nimport Steps from \"../Steps/Steps\";\nimport Loading from \"../Loading/Loading\";\nimport Modal from \"../Modal/Modal\";\nimport Alert from \"../Alert/Alert\";\n\n// react-select options\nconst recipeType = [\n  { value: 0, label: \"均衡料理\", name: \"category\" },\n  { value: 1, label: \"減醣料理\", name: \"category\" },\n  { value: 2, label: \"增肌料理\", name: \"category\" },\n];\nconst recipeTime = [\n  { value: 0, label: \"早餐\", name: \"mealTime\" },\n  { value: 1, label: \"午晚餐\", name: \"mealTime\" },\n  { value: 2, label: \"點心\", name: \"mealTime\" },\n];\nconst portion = [\n  { value: 0, label: \"1\", name: \"portion\" },\n  { value: 1, label: \"2\", name: \"portion\" },\n  { value: 2, label: \"3\", name: \"portion\" },\n  { value: 3, label: \"4\", name: \"portion\" },\n  { value: 4, label: \"5\", name: \"portion\" },\n  { value: 5, label: \"6\", name: \"portion\" },\n  { value: 6, label: \"7\", name: \"portion\" },\n  { value: 7, label: \"8\", name: \"portion\" },\n  { value: 8, label: \"9\", name: \"portion\" },\n  { value: 9, label: \"10+\", name: \"portion\" },\n];\nconst cookTime = [\n  { value: 0, label: \"5\", name: \"cookTime\" },\n  { value: 1, label: \"10\", name: \"cookTime\" },\n  { value: 2, label: \"15\", name: \"cookTime\" },\n  { value: 3, label: \"20\", name: \"cookTime\" },\n  { value: 4, label: \"30\", name: \"cookTime\" },\n  { value: 5, label: \"45\", name: \"cookTime\" },\n  { value: 6, label: \"60\", name: \"cookTime\" },\n  { value: 7, label: \"90\", name: \"cookTime\" },\n  { value: 8, label: \"120+\", name: \"cookTime\" },\n];\n\nconst WriteRecipe = ({ user }) => {\n  let history = useHistory();\n\n  const [inputs, setInputs] = useState({\n    title: \"\",\n    category: \"\",\n    mealTime: \"\",\n    summary: \"\",\n    portion: \"\",\n    cookTime: \"\",\n    tips: \"\",\n  });\n  const [ingredients, setIngredients] = useState([\n    {\n      uid: `${new Date().getTime()}-1`,\n      value: \"\",\n      label: \"\",\n      id: \"\",\n      type: \"\",\n      name: \"\",\n      calorie: 0,\n      carb: 0,\n      protein: 0,\n      fat: 0,\n      qty: \"\",\n    },\n    {\n      uid: `${new Date().getTime()}-2`,\n      value: \"\",\n      label: \"\",\n      id: \"\",\n      type: \"\",\n      name: \"\",\n      calorie: 0,\n      carb: 0,\n      protein: 0,\n      fat: 0,\n      qty: \"\",\n    },\n  ]);\n  const [steps, setSteps] = useState([\n    {\n      uid: `${new Date().getTime()}-1`,\n      text: \"\",\n      imageUrl: null,\n      objectUrl: defaultImg,\n      file: null,\n    },\n    {\n      uid: `${new Date().getTime()}-2`,\n      text: \"\",\n      imageUrl: null,\n      objectUrl: defaultImg,\n      file: null,\n    },\n    {\n      uid: `${new Date().getTime()}-3`,\n      text: \"\",\n      imageUrl: null,\n      objectUrl: defaultImg,\n      file: null,\n    },\n  ]);\n  const [coverPhoto, setCoverPhoto] = useState(null);\n  const [coverPhotoUrl, setCoverPhotoUrl] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showCancelModal, setShowCancelModal] = useState(false);\n  const [showPostModal, setShowPostModal] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertText, setAlertText] = useState(\"\");\n\n  useEffect(() => {\n    if (coverPhotoUrl) {\n      uploadRecipe();\n    }\n  }, [coverPhotoUrl]);\n\n  const handleInputChange = (e) => {\n    setInputs({ ...inputs, [e.target.name]: e.target.value });\n  };\n\n  const handleSelectChange = (select) => {\n    setInputs({ ...inputs, [select.name]: select.label });\n  };\n\n  const checkInputs = () => {\n    const {\n      title,\n      category,\n      mealTime,\n      summary,\n      portion,\n      cookTime,\n      tips,\n    } = inputs;\n    if (title.trim().length === 0) {\n      setAlertText(\"請輸入食譜名稱\");\n      toggleAlert();\n    } else if (category.trim().length === 0) {\n      setAlertText(\"請選擇食譜分類\");\n      toggleAlert();\n    } else if (mealTime.trim().length === 0) {\n      setAlertText(\"請選擇適合時間\");\n      toggleAlert();\n    } else if (!coverPhoto) {\n      setAlertText(\"請上傳食譜封面照片\");\n      toggleAlert();\n    } else if (summary.trim().length === 0) {\n      setAlertText(\"請輸入食譜描述\");\n      toggleAlert();\n    } else if (portion.trim().length === 0) {\n      setAlertText(\"請選擇份量\");\n      toggleAlert();\n    } else if (cookTime.trim().length === 0) {\n      setAlertText(\"請選擇烹調時間\");\n      toggleAlert();\n    } else if (ingredients.some((i) => i.label.trim().length === 0)) {\n      setAlertText(\"食材請選填完整\");\n      toggleAlert();\n    } else if (ingredients.some((i) => i.qty.trim().length === 0)) {\n      setAlertText(\"請輸入食材克數\");\n      toggleAlert();\n    } else if (ingredients.some((i) => isNaN(i.qty))) {\n      setAlertText(\"食材克數請輸入數字\");\n      toggleAlert();\n    } else if (steps.some((s) => s.text.trim().length === 0)) {\n      setAlertText(\"請輸入步驟說明\");\n      toggleAlert();\n    } else if (tips.trim().length === 0) {\n      setAlertText(\"請輸入食譜小叮嚀\");\n      toggleAlert();\n    } else {\n      setShowPostModal(true);\n    }\n  };\n\n  const updateImagesUrltoState = () => {\n    setIsLoading(true);\n    let promises = [];\n    steps.forEach((step) => {\n      if (step.file) {\n        promises = [\n          ...promises,\n          uploadImageToStorage(\n            `/recipeImages/${new Date().getTime()}-${step.file.name}`,\n            step.file,\n            (downloadURL) => {\n              setSteps((prevSteps) =>\n                prevSteps.map((prevStep) => {\n                  if (prevStep.uid === step.uid) {\n                    return { ...prevStep, imageUrl: downloadURL };\n                  }\n                  return prevStep;\n                })\n              );\n            }\n          ),\n        ];\n      }\n    });\n\n    Promise.all(promises).then((response) => {\n      uploadImageToStorage(\n        `/recipeImages/${new Date().getTime()}-${coverPhoto.name}`,\n        coverPhoto,\n        (downloadURL) => {\n          setCoverPhotoUrl(downloadURL);\n        }\n      );\n    });\n  };\n\n  const uploadRecipe = () => {\n    const { title, category, mealTime, summary, portion, cookTime } = inputs;\n    const newSteps = steps.map((step) => {\n      return {\n        uid: step.uid,\n        imageUrl: step.imageUrl,\n        text: step.text,\n      };\n    });\n    postRecipe({\n      title,\n      category,\n      mealTime,\n      summary,\n      portion,\n      cookTime,\n      steps: newSteps,\n      tips: inputs.tips,\n      image: coverPhotoUrl,\n      ingredients,\n      authorId: user.uid,\n      authorPhotoURL: user.photoURL,\n      authorName: user.displayName,\n    });\n    setIsLoading(false);\n    history.push(`/profile/${user.uid}/myRecipes`);\n  };\n\n  const toggleCanceling = () => {\n    setShowCancelModal(!showCancelModal);\n  };\n\n  const confirmCancel = () => {\n    history.push(`/profile/${user.uid}/myRecipes`);\n  };\n\n  const togglePosting = () => {\n    setShowPostModal(!showPostModal);\n  };\n\n  const confirmPost = () => {\n    updateImagesUrltoState();\n  };\n\n  const toggleAlert = () => {\n    setShowAlert(!showAlert);\n  };\n\n  if (isLoading) {\n    return <Loading />;\n  } else {\n    return (\n      <div>\n        <main className={styles.container}>\n          <div>\n            <div className={styles.text}>\n              食譜名稱<span>（14字以內）</span>\n            </div>\n            <input\n              className={styles.input}\n              name=\"title\"\n              value={inputs.title}\n              onChange={handleInputChange}\n              type=\"text\"\n              placeholder=\"請輸入食譜名稱（必填）\"\n            ></input>\n          </div>\n          <div className={styles.flex}>\n            <div className={styles.recipeType}>\n              <div className={styles.text}>食譜分類</div>\n              <Select\n                options={recipeType}\n                onChange={handleSelectChange}\n                placeholder=\"請選擇\"\n              />\n            </div>\n            <div className={styles.recipeTime}>\n              <div className={styles.text}>適合時間</div>\n              <Select\n                options={recipeTime}\n                onChange={handleSelectChange}\n                placeholder=\"請選擇\"\n              />\n            </div>\n          </div>\n          <UploadCoverPhoto setCoverPhoto={setCoverPhoto} />\n          <div>\n            <div className={styles.text}>簡介</div>\n            <textarea\n              placeholder=\"請輸入食譜描述（必填，最多200字）\"\n              name=\"summary\"\n              value={inputs.summary}\n              onChange={handleInputChange}\n            ></textarea>\n          </div>\n          <div className={styles.flex}>\n            <div className={styles.portion}>\n              <div className={styles.text}>\n                份量<span> (人份)</span>\n              </div>\n              <Select\n                options={portion}\n                onChange={handleSelectChange}\n                placeholder=\"請選擇\"\n              />\n            </div>\n            <div className={styles.cookTime}>\n              <div className={styles.text}>\n                烹調時間<span> (分鐘)</span>\n              </div>\n              <Select\n                options={cookTime}\n                onChange={handleSelectChange}\n                placeholder=\"請選擇\"\n              />\n            </div>\n          </div>\n          <Ingredients\n            ingredients={ingredients}\n            setIngredients={setIngredients}\n          />\n          <Steps steps={steps} setSteps={setSteps} />\n          <div className={styles.tips}>\n            <img src={tipsBulb} alt=\"小叮嚀\" style={{ width: \"30px\" }} />\n            <span className={styles.text}>\n              <mark>小叮嚀</mark>\n            </span>\n            <textarea\n              placeholder=\"請輸入食譜小叮嚀（必填）\"\n              name=\"tips\"\n              value={inputs.tips}\n              onChange={handleInputChange}\n            ></textarea>\n          </div>\n          <div className={styles.flex}>\n            <button className={styles.fullBtn} onClick={checkInputs}>\n              發布食譜\n            </button>\n            <button className={styles.lineBtn} onClick={toggleCanceling}>\n              取消\n            </button>\n          </div>\n        </main>\n        {showCancelModal && (\n          <Modal\n            text={\"確定要捨棄這次的編輯？\"}\n            handleCancel={toggleCanceling}\n            handelConfirm={confirmCancel}\n          />\n        )}\n        {showPostModal && (\n          <Modal\n            text={\"確認要發布此篇食譜？\"}\n            handleCancel={togglePosting}\n            handelConfirm={confirmPost}\n          />\n        )}\n        {showAlert && <Alert text={alertText} handelConfirm={toggleAlert} />}\n      </div>\n    );\n  }\n};\nexport default WriteRecipe;\n",["138","139"],"/Users/rosechen/EatHealth/eat-health/src/Components/Footer/Footer.js",[],"/Users/rosechen/EatHealth/eat-health/src/Components/Ingredients/Ingredients.js",[],"/Users/rosechen/EatHealth/eat-health/src/Components/Home/Home.js",[],["140","141"],"/Users/rosechen/EatHealth/eat-health/src/Components/SignUp/SignUp.js",[],"/Users/rosechen/EatHealth/eat-health/src/Components/LogIn/LogIn.js",[],"/Users/rosechen/EatHealth/eat-health/src/PrivateRoute.js",[],"/Users/rosechen/EatHealth/eat-health/src/Components/RecipeList/RecipeList.js",["142"],"import { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { getFavorites, getRecipe, getAllRecipes } from \"../../utils/firebase\";\nimport styles from \"./RecipeList.module.scss\";\nimport image from \"../../images/noRecipe.png\";\n\nimport RecipeListItem from \"../RecipeListItem/RecipeListItem\";\n\nconst RecipeList = ({ subProfile }) => {\n  const [recipeList, setRecipeList] = useState([]);\n  const [gotData, setGotData] = useState(false);\n\n  let { userId } = useParams();\n\n  let urlParams = new URLSearchParams(window.location.search);\n  let category = urlParams.get(\"category\");\n  let mealTime = urlParams.get(\"mealTime\");\n\n  useEffect(() => {\n    setGotData(false);\n    setRecipeList([]);\n\n    if (subProfile === \"favorites\") {\n      getFavorites(userId).then((favorites) => {\n        const getFavoritesData = [];\n        favorites.forEach((favorite) => {\n          getFavoritesData.push(getRecipe(favorite.id));\n        });\n        Promise.all(getFavoritesData).then((favoriteDocs) => {\n          setRecipeList(\n            favoriteDocs.map((favoriteDoc) => {\n              return { ...favoriteDoc.data(), liked: 0, commments: 0 };\n            })\n          );\n          setGotData(true);\n        });\n      });\n    } else {\n      getAllRecipes().then((recipesDocs) => {\n        setRecipeList(\n          recipesDocs.docs.map((recipeDoc) => {\n            return { ...recipeDoc.data(), like: 0, commments: 0 };\n          })\n        );\n        setGotData(true);\n      });\n    }\n  }, [subProfile]);\n\n  let filteredRecipeList = recipeList\n    .filter((recipe) => {\n      switch (category) {\n        case \"balanced\":\n          return recipe.category === \"均衡料理\";\n        case \"lowcarbs\":\n          return recipe.category === \"減醣料理\";\n        case \"highpt\":\n          return recipe.category === \"增肌料理\";\n        default:\n          return true;\n      }\n    })\n    .filter((recipe) => {\n      switch (mealTime) {\n        case \"breakfast\":\n          return recipe.mealTime === \"早餐\";\n        case \"lunchDinner\":\n          return recipe.mealTime === \"午晚餐\";\n        case \"dessert\":\n          return recipe.mealTime === \"點心\";\n        default:\n          return true;\n      }\n    })\n    .filter((recipe) => {\n      if (subProfile === \"myRecipes\") {\n        return recipe.authorId === userId;\n      }\n      return true;\n    });\n\n  if (gotData) {\n    return (\n      <div className={styles.recipeList}>\n        {filteredRecipeList.length > 0 ? (\n          filteredRecipeList.map((recipe) => {\n            return <RecipeListItem recipe={recipe} key={recipe.id} />;\n          })\n        ) : (\n          <div className={styles.noRecipeList}>\n            <div className={styles.noRecipeImage}>\n              <img src={image} alt=\"\"></img>\n            </div>\n            <div className={styles.text}>\n              <div className={styles.title}>目前還沒有食譜哦！</div>\n              <div className={styles.description}>\n                分享自己的料理，\n                <br />\n                一起加入健康食分吧！\n              </div>\n              <Link to=\"/writeRecipe\">\n                <button className={styles.fullBtn}>開始寫食譜</button>\n              </Link>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default RecipeList;\n","/Users/rosechen/EatHealth/eat-health/src/Components/Recipe/Recipe.js",["143"],"import { Link, useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faHeart,\n  faCommentAlt,\n  faBookmark,\n} from \"@fortawesome/free-regular-svg-icons\";\nimport {\n  faHeart as faFullHeart,\n  faBookmark as faFullBookmark,\n  faCheck,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport {\n  toggleFollowing,\n  toggleFavorite,\n  toggleLiked,\n  getRealtimeRecipe,\n  getRealtimeFans,\n  getRealtimeRecipeLikes,\n  updateRecipe,\n  getRealtimeRecipeComments,\n  getRealtimeIsLiked,\n  getRealtimeIsFavorite,\n  getRealtimeFollowings,\n} from \"../../utils/firebase\";\nimport styles from \"./Recipe.module.scss\";\nimport tipsBulb from \"../../images/tips-bulb.svg\";\nimport loading from \"../../images/rolling.gif\";\n\nimport Chart from \"../Chart/Chart\";\nimport Comments from \"../Comments/Comments\";\nimport CategoryBox from \"../CategoryBox/CategoryBox\";\nimport RecommendedBox from \"../RecommendedBox/RecommendedBox\";\nimport Alert from \"../Alert/Alert\";\n\nconst Recipe = ({ user }) => {\n  let { recipeId } = useParams();\n\n  const [recipe, setRecipe] = useState({});\n  const [nutrition, setNutrition] = useState({\n    calories: 0,\n    carbsQty: 0,\n    proteinQty: 0,\n    fatQty: 0,\n    proteinPercentage: 100,\n    fatPercentage: 100,\n    carbsPercentage: 100,\n  });\n  const [isLiked, setIsLiked] = useState(false);\n  const [isAdded, setIsAdded] = useState(false);\n  const [isFollowing, setIsfollowing] = useState(false);\n  const [isMyself, setIsMyself] = useState(false);\n  const [authorFans, setAuthorFans] = useState(0);\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertText, setAlertText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  // calculate nutrition information\n  const sumNutritionQty = (ingredients, nutrient) => {\n    return Math.round(\n      ingredients.reduce((total, ingredient) => {\n        return ingredient[nutrient] * (ingredient.qty / 100) + total;\n      }, 0)\n    );\n  };\n\n  const countNutritionPercentage = (\n    nutrientQty,\n    totalCalories,\n    caloriesPerGram\n  ) => {\n    return Math.round(((nutrientQty * caloriesPerGram) / totalCalories) * 100);\n  };\n\n  const countNutritionalFacts = (ingredients) => {\n    const calories = sumNutritionQty(ingredients, \"calorie\");\n    const carbsQty = sumNutritionQty(ingredients, \"carb\");\n    const proteinQty = sumNutritionQty(ingredients, \"protein\");\n    const fatQty = sumNutritionQty(ingredients, \"fat\");\n    const proteinPercentage = countNutritionPercentage(proteinQty, calories, 4);\n    const fatPercentage = countNutritionPercentage(fatQty, calories, 9);\n    const carbsPercentage = 100 - (proteinPercentage + fatPercentage);\n    return {\n      calories,\n      carbsQty,\n      proteinQty,\n      fatQty,\n      proteinPercentage,\n      fatPercentage,\n      carbsPercentage,\n    };\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    setNutrition({\n      calories: 0,\n      carbsQty: 0,\n      proteinQty: 0,\n      fatQty: 0,\n      proteinPercentage: 100,\n      fatPercentage: 100,\n      carbsPercentage: 100,\n    });\n    setIsLiked(false);\n    setIsAdded(false);\n    setIsfollowing(false);\n    setIsMyself(false);\n\n    const unsubscribeRecipe = getRealtimeRecipe(recipeId, (recipeDoc) => {\n      if (recipeDoc.exists) {\n        // update recipe's details\n        const recipe = recipeDoc.data();\n        setRecipe(recipe);\n        const nutritionalFacts = countNutritionalFacts(recipe.ingredients);\n        setNutrition(nutritionalFacts);\n        getRealtimeFans(recipe.authorId, (fans) => setAuthorFans(fans.size));\n        getRealtimeRecipeLikes(recipe.id, (likes) =>\n          updateRecipe(recipe.id, { liked: likes.length })\n        );\n        getRealtimeRecipeComments(recipe.id, (comments) =>\n          updateRecipe(recipe.id, { comments: comments.length })\n        );\n        setIsLoading(false);\n\n        // update user's liked, favorite, following\n        if (user) {\n          getRealtimeIsLiked(user.uid, (likedRecipes) => {\n            setIsLiked(false); \n            likedRecipes.forEach((likedRecipe) => {\n              if (likedRecipe.id === recipeId) {\n                return setIsLiked(true);\n              }\n            });\n          });\n          getRealtimeIsFavorite(user.uid, (favoriteRecipes) => {\n            setIsAdded(false); \n            favoriteRecipes.forEach((favoriteRecipe) => {\n              if (favoriteRecipe.id === recipeId) {\n                return setIsAdded(true);\n              }\n            });\n          });\n          if (user.uid === recipe.authorId) {\n            setIsMyself(true);\n          } else {\n            getRealtimeFollowings(user.uid, (followings) => {\n              setIsfollowing(false); \n              followings.forEach((following) => {\n                if (following.id === recipe.authorId) {\n                  return setIsfollowing(true);\n                }\n              });\n            });\n            setIsMyself(false);\n          }\n        }\n      }\n    });\n    return () => {\n      unsubscribeRecipe();\n    };\n  }, [recipe.authorId, recipeId]);\n\n  const handleToggleLiked = () => {\n    if (user) {\n      toggleLiked(user.uid, recipeId);\n    } else {\n      setShowAlert(true);\n      setAlertText(\"請先登入會員才能按讚哦！\");\n    }\n  };\n\n  const handleToggleFavorite = () => {\n    if (user) {\n      toggleFavorite(user.uid, recipeId);\n    } else {\n      setShowAlert(true);\n      setAlertText(\"請先登入會員才能收藏哦！\");\n    }\n  };\n\n  const handleToggleFollowing = () => {\n    if (user) {\n      toggleFollowing(user.uid, recipe.authorId);\n    } else {\n      setShowAlert(true);\n      setAlertText(\"請先登入會員才能追蹤哦！\");\n    }\n  };\n\n  const toggleAlert = () => {\n    setShowAlert(!showAlert);\n  };\n\n  return (\n    <main className={styles.container}>\n      <div className={styles.recipeContainer}>\n        <div className={styles.recipe}>\n          {\n            isLoading &&\n            <div className={styles.loading}>\n              <img src={loading} alt=\"loading\"></img>\n            </div>\n          }\n          <div className={styles.title}>{recipe.title}</div>\n          <div className={styles.tag}>\n            <small>{recipe.category}</small>\n            <small>{recipe.mealTime}</small>\n          </div>\n          <div className={styles.main}>\n            <div className={styles.image}>\n              <img src={recipe.image} alt=\"食譜照片\"></img>\n            </div>\n            <div className={styles.about}>\n              <div className={styles.author}>\n                <Link to={`/profile/${recipe.authorId}/myRecipes`}>\n                  <div className={styles.profile}>\n                    <img src={recipe.authorPhotoURL} alt=\"\"></img>\n                  </div>\n                </Link>\n                <div>\n                  <Link to={`/profile/${recipe.authorId}/myRecipes`}>\n                    <div className={styles.name}>{recipe.authorName}</div>\n                  </Link>\n                  <div>{authorFans} 個粉絲</div>\n                </div>\n                {isMyself === false &&\n                  (isFollowing ? (\n                    <button\n                      className={styles.greyBtn}\n                      onClick={handleToggleFollowing}\n                    >\n                      <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>\n                      &nbsp;已追蹤\n                    </button>\n                  ) : (\n                    <button\n                      className={styles.darkBtn}\n                      onClick={handleToggleFollowing}\n                    >\n                      追蹤\n                    </button>\n                  ))}\n              </div>\n\n              <div className={styles.likeComment}>\n                <div>\n                  <FontAwesomeIcon\n                    icon={faHeart}\n                    style={{ color: \"#8a949f\" }}\n                  />\n                  <span>{recipe.liked} 個讚</span>\n                </div>\n                <div>\n                  <FontAwesomeIcon\n                    icon={faCommentAlt}\n                    style={{ color: \"#8a949f\" }}\n                  />\n                  <span>{recipe.comments} 則留言</span>\n                </div>\n              </div>\n              <div className={styles.summary}>{recipe.summary}</div>\n              <div className={styles.btnGroup}>\n                <div className={styles.btn} onClick={handleToggleLiked}>\n                  {isLiked ? (\n                    <button className={styles.lineBtn}>\n                      <FontAwesomeIcon\n                        icon={faFullHeart}\n                        style={{ color: \"#fc4b4e\", marginRight: \"5px\" }}\n                      />\n                      已按讚\n                    </button>\n                  ) : (\n                    <button className={styles.lineBtn}>\n                      <FontAwesomeIcon\n                        icon={faHeart}\n                        style={{ color: \"#888888\", marginRight: \"5px\" }}\n                      />\n                      按讚\n                    </button>\n                  )}\n                </div>\n                <div className={styles.btn} onClick={handleToggleFavorite}>\n                  {isAdded ? (\n                    <button className={styles.lineBtn}>\n                      <FontAwesomeIcon\n                        icon={faFullBookmark}\n                        style={{ color: \"#3f3d56\", marginRight: \"5px\" }}\n                      />\n                      已收藏\n                    </button>\n                  ) : (\n                    <button className={styles.lineBtn}>\n                      <FontAwesomeIcon\n                        icon={faBookmark}\n                        style={{ color: \"#888888\", marginRight: \"5px\" }}\n                      />\n                      收藏\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className={styles.information}>\n            <div className={styles.head}>\n              <div className={styles.texts}>熱量</div>\n              <div>\n                <strong>{nutrition.calories}</strong> 大卡\n              </div>\n            </div>\n            <div className={styles.head}>\n              <div className={styles.texts}>份量</div>\n              <div>\n                <strong>{recipe.portion}</strong> 人份\n              </div>\n            </div>\n            <div className={styles.head}>\n              <div className={styles.texts}>時間</div>\n              <div>\n                <strong>{recipe.cookTime}</strong> 分鐘\n              </div>\n            </div>\n            <div className={styles.body}>\n              <Chart color={\"#85bf3e\"} percentage={nutrition.carbsPercentage} />\n              <div className={styles.texts}>\n                <span className={styles.dot1}></span>碳水化合物\n              </div>\n              <div>\n                <strong>{nutrition.carbsQty}</strong> 克\n              </div>\n            </div>\n            <div className={styles.body}>\n              <Chart\n                color={\"#fec740\"}\n                percentage={nutrition.proteinPercentage}\n              />\n              <div className={styles.texts}>\n                <span className={styles.dot2}></span>蛋白質\n              </div>\n              <div>\n                <strong>{nutrition.proteinQty}</strong> 克\n              </div>\n            </div>\n            <div className={styles.body}>\n              <Chart color={\"#ff9300\"} percentage={nutrition.fatPercentage} />\n              <div className={styles.texts}>\n                <span className={styles.dot3}></span>脂肪\n              </div>\n              <div>\n                <strong>{nutrition.fatQty}</strong> 克\n              </div>\n            </div>\n          </div>\n          <div>\n            <div className={styles.texts}>食材</div>\n            {recipe.ingredients\n              ? recipe.ingredients.map((item) => {\n                  return (\n                    <div className={styles.ingredient} key={item.id}>\n                      <div>{item.name}</div>\n                      <div>{item.qty} 公克</div>\n                    </div>\n                  );\n                })\n              : null}\n          </div>\n          <div>\n            <div className={styles.texts}>步驟</div>\n            {\n              recipe.steps && \n                recipe.steps.map((step, index) => {\n                  return (\n                    <div className={styles.step} key={step.uid}>\n                      <div className={styles.photo}>\n                        {step.imageUrl ? (\n                          <img\n                            src={step.imageUrl}\n                            alt={`步驟${index + 1}`}\n                          ></img>\n                        ) : (\n                          <div></div>\n                        )}\n                      </div>\n                      <div className={styles.content}>\n                        <div className={styles.stepNumber}>{index + 1}.</div>\n                        <p>{step.text}</p>\n                      </div>\n                    </div>\n                  );\n              })\n            }\n          </div>\n          <div className={styles.tips}>\n            <img src={tipsBulb} alt=\"小叮嚀\" style={{ width: \"30px\" }} />\n            <span className={styles.title}>\n              <mark>小叮嚀</mark>\n            </span>\n            <div>{recipe.tips}</div>\n          </div>\n        </div>\n        \n\n        <div className={styles.commentBox}>\n          <Comments user={user} />\n        </div>\n      </div>\n      <div className={styles.side}>\n        <RecommendedBox />\n        <CategoryBox />\n      </div>\n      {showAlert && <Alert text={alertText} handelConfirm={toggleAlert} />}\n    </main>\n  );\n};\n\nexport default Recipe;\n","/Users/rosechen/EatHealth/eat-health/src/Components/Chart/Chart.js",[],["144","145"],"/Users/rosechen/EatHealth/eat-health/src/Components/Profile/Profile.js",["146"],"import { useEffect, useState } from \"react\";\nimport {\n  Switch,\n  Route,\n  useRouteMatch,\n  NavLink,\n  useParams,\n} from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\n\nimport styles from \"./Profile.module.scss\";\nimport SubProfile from \"../SubProfile/SubProfile\";\n\nimport {\n  toggleFollowing,\n  getUser,\n  getUserRecipe,\n  getRealtimeFans,\n  getRealtimeFollowings,\n} from \"../../utils/firebase\";\n\nconst Profile = ({ user }) => {\n  const [profile, setProfile] = useState({});\n  const [recipes, setRecipes] = useState(0);\n  const [fans, setFans] = useState(0);\n  const [followings, setFollowings] = useState([]);\n  const [isFollowing, setIsFollowing] = useState(false);\n  const [gotFollowingsData, setGotFollowingsData] = useState(false);\n\n  const { url, path } = useRouteMatch();\n  const { userId } = useParams();\n\n  useEffect(() => {\n    setGotFollowingsData(false);\n\n    // 取得基本資料\n    getUser(userId).then((userDoc) => {\n      const user = userDoc.data();\n      setProfile(user);\n    });\n    // 取得食譜數量\n    getUserRecipe(userId).then((recipeDocs) => {\n      setRecipes(recipeDocs.size);\n    });\n    // 取得粉絲數量\n    const unsubscribeFans = getRealtimeFans(userId, (fans) => {\n      setFans(fans.size);\n    });\n\n    // 取得追蹤列表\n    const unsubscribeFollowingList = getRealtimeFollowings(\n      userId,\n      (followings) => {\n        let followingList = [];\n        followings.forEach((following) => {\n          followingList = [...followingList, following.data().followingId];\n        });\n        setFollowings(followingList);\n        setGotFollowingsData(true);\n      }\n    );\n\n    // 取得使用者是否正在追蹤此人\n    const unsubscribeIsFollowing = getRealtimeFollowings(\n      user.uid,\n      (followings) => {\n        followings.forEach((following) => {\n          if (following.id === userId) {\n            setIsFollowing(true);\n          }\n        });\n      }\n    );\n\n    return () => {\n      unsubscribeFans();\n      unsubscribeFollowingList();\n      unsubscribeIsFollowing();\n    };\n  }, [userId]);\n\n  const handleToggleFollowing = () => {\n    setIsFollowing(!isFollowing);\n    toggleFollowing(user.uid, userId);\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.user}>\n        <div className={styles.photo}>\n          {profile ? <img src={profile.photoURL} alt=\"大頭照\"></img> : null}\n        </div>\n        <div className={styles.info}>\n          <div className={styles.name}>{profile.displayName}</div>\n          <div>{profile.email}</div>\n        </div>\n        <div>\n          {user &&\n            user.uid !== userId &&\n            (isFollowing ? (\n              <button\n                className={styles.greyBtn}\n                onClick={handleToggleFollowing}\n              >\n                <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>&nbsp;已追蹤\n              </button>\n            ) : (\n              <button\n                className={styles.darkBtn}\n                onClick={handleToggleFollowing}\n              >\n                追蹤\n              </button>\n            ))}\n        </div>\n        <div className={styles.datas}>\n          <div className={styles.data}>\n            <div className={styles.number}>{recipes}</div>\n            <div>食譜</div>\n          </div>\n          <div className={styles.data}>\n            <div className={styles.number}>{fans}</div>\n            <div>粉絲</div>\n          </div>\n          <div className={styles.data}>\n            <div className={styles.number}>{followings.length}</div>\n            <div>追蹤中</div>\n          </div>\n        </div>\n      </div>\n      <div className={styles.profile}>\n        <ul className={styles.navbar}>\n          <NavLink\n            exact\n            to={`${url}/myRecipes`}\n            activeClassName={styles.activeLink}\n          >\n            <li>我的食譜</li>\n          </NavLink>\n          {user.uid === userId && (\n            <NavLink\n              exact\n              to={`${url}/favorites`}\n              activeClassName={styles.activeLink}\n            >\n              <li>收藏</li>\n            </NavLink>\n          )}\n          {user.uid === userId && (\n            <NavLink\n              exact\n              to={`${url}/followings`}\n              activeClassName={styles.activeLink}\n            >\n              <li>追蹤中</li>\n            </NavLink>\n          )}\n        </ul>\n        <div className={styles.content}>\n          <Switch>\n            <Route\n              exact\n              path={`${path}/:subProfile`}\n              render={() => (\n                <SubProfile\n                  followings={followings}\n                  user={user}\n                  gotFollowingsData={gotFollowingsData}\n                  setGotFollowingsData={setGotFollowingsData}\n                />\n              )}\n            />\n          </Switch>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n",["147","148"],"/Users/rosechen/EatHealth/eat-health/src/Components/Recipes/Recipes.js",["149"],"import { useEffect, useState } from \"react\";\nimport { NavLink, Switch } from \"react-router-dom\";\n\nimport styles from \"./Recipes.module.scss\";\n\nimport RecipeList from \"../RecipeList/RecipeList\";\nimport CategoryBox from \"../CategoryBox/CategoryBox\";\n\nconst Recipes = () => {\n  const [categoryName, setCategoryName] = useState(\"全部料理\");\n  const [categoryEnglish, setCategoryEnglish] = useState(\"ALL RECIPES\");\n  let urlParams = new URLSearchParams(window.location.search);\n  let category = urlParams.get(\"category\");\n  let mealTime = urlParams.get(\"mealTime\");\n\n  useEffect(() => {\n    switch (category) {\n      case \"all\":\n        setCategoryName(\"全部料理\");\n        setCategoryEnglish(\"ALL RECIPES\");\n        break;\n      case \"balanced\":\n        setCategoryName(\"均衡料理\");\n        setCategoryEnglish(\"BALANCED\");\n        break;\n      case \"lowcarbs\":\n        setCategoryName(\"減醣料理\");\n        setCategoryEnglish(\"LOW CARBS\");\n        break;\n      case \"highpt\":\n        setCategoryName(\"增肌料理\");\n        setCategoryEnglish(\"HIGH PROTEINS\");\n        break;\n      default:\n        setCategoryName(\"全部料理\");\n    }\n  }, [category]);\n\n  const checkActive = (query) => {\n    return mealTime === query;\n  };\n\n  return (\n    <div className={styles.recipesContainer}>\n      <div className={styles.banner}>\n        <div>{categoryName}</div>\n        <div className={styles.categoryEnglish}>{categoryEnglish}</div>\n      </div>\n      <div className={styles.container}>\n        <div className={styles.main}>\n          <div className={styles.recipes}>\n            <div className={styles.mealTime}>\n              <NavLink\n                exact\n                to={`/recipes?category=${category}`}\n                activeClassName={styles.mealTimeActive}\n                isActive={() => checkActive(null)}\n              >\n                全部\n              </NavLink>\n              <NavLink\n                exact\n                to={`/recipes?category=${category}&mealTime=breakfast`}\n                activeClassName={styles.mealTimeActive}\n                isActive={() => checkActive(\"breakfast\")}\n              >\n                早餐\n              </NavLink>\n              <NavLink\n                exact\n                to={`/recipes?category=${category}&mealTime=lunchDinner`}\n                activeClassName={styles.mealTimeActive}\n                isActive={() => checkActive(\"lunchDinner\")}\n              >\n                午 / 晚餐\n              </NavLink>\n              <NavLink\n                exact\n                to={`/recipes?category=${category}&mealTime=dessert`}\n                activeClassName={styles.mealTimeActive}\n                isActive={() => checkActive(\"dessert\")}\n              >\n                點心 / 下午茶\n              </NavLink>\n            </div>\n            <RecipeList />\n          </div>\n          <div className={styles.categoryBox}>\n            <CategoryBox />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Recipes;\n","/Users/rosechen/EatHealth/eat-health/src/Components/Comments/Comments.js",[],"/Users/rosechen/EatHealth/eat-health/src/Components/RecipeListItem/RecipeListItem.js",["150"],"import { useEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart, faCommentAlt } from \"@fortawesome/free-regular-svg-icons\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  getRecipeLikes,\n  getRecipeComments,\n  updateRecipe,\n} from \"../../utils/firebase\";\nimport styles from \"./RecipeListItem.module.scss\";\n\nconst RecipeListItem = ({ recipe }) => {\n  const [recipeData, setRecipeData] = useState(recipe);\n\n  useEffect(() => {\n    const getLikesAndComments = [\n      getRecipeLikes(recipe.id),\n      getRecipeComments(recipe.id),\n    ];\n    Promise.all(getLikesAndComments).then((result) => {\n      const likesAndComments = {\n        liked: result[0].size,\n        comments: result[1].size,\n      };\n      updateRecipe(recipe.id, likesAndComments);\n      setRecipeData({ ...recipeData, ...likesAndComments });\n    });\n  }, []);\n\n  return (\n    <Link to={`/recipes/${recipeData.id}`}>\n      <div className={styles.recipe}>\n        <div className={styles.image}>\n          <img src={recipeData.image} alt=\"食譜照片\"></img>\n        </div>\n        <div className={styles.content}>\n          <div className={styles.title}>{recipeData.title}</div>\n          <div className={styles.author}>By {recipeData.authorName}</div>\n          <div>\n            <small>{recipeData.category}</small>{\" \"}\n            <small>{recipeData.mealTime}</small>\n          </div>\n          <div className={styles.likeComment}>\n            <div>\n              <FontAwesomeIcon icon={faHeart} style={{ color: \"#8a949f\" }} />\n              <span className={styles.text}>{recipeData.liked} 個讚</span>\n            </div>\n            <div>\n              <FontAwesomeIcon\n                icon={faCommentAlt}\n                style={{ color: \"#8a949f\" }}\n              />\n              <span className={styles.text}>{recipeData.comments} 則留言</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default RecipeListItem;\n","/Users/rosechen/EatHealth/eat-health/src/Components/SubProfile/SubProfile.js",[],["151","152"],"/Users/rosechen/EatHealth/eat-health/src/Components/FollowList/FollowList.js",[],"/Users/rosechen/EatHealth/eat-health/src/Components/Steps/Steps.js",[],"/Users/rosechen/EatHealth/eat-health/src/Components/CategoryBox/CategoryBox.js",[],"/Users/rosechen/EatHealth/eat-health/src/Components/RecommendedBox/RecommendedBox.js",[],["153","154"],"/Users/rosechen/EatHealth/eat-health/src/Components/Loading/Loading.js",[],"/Users/rosechen/EatHealth/eat-health/src/Components/Modal/Modal.js",[],"/Users/rosechen/EatHealth/eat-health/src/Components/Alert/Alert.js",[],"/Users/rosechen/EatHealth/eat-health/src/utils/firebase.js",[],"/Users/rosechen/EatHealth/eat-health/src/Components/UploadCoverPhoto/UploadCoverPhoto.js",[],"/Users/rosechen/EatHealth/eat-health/src/utils/firebaseConfig.js",[],{"ruleId":"155","severity":1,"message":"156","line":2,"column":27,"nodeType":"157","messageId":"158","endLine":2,"endColumn":33},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"159","replacedBy":"163"},{"ruleId":"161","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":127,"column":6,"nodeType":"167","endLine":127,"endColumn":21,"suggestions":"168"},{"ruleId":"159","replacedBy":"169"},{"ruleId":"161","replacedBy":"170"},{"ruleId":"159","replacedBy":"171"},{"ruleId":"161","replacedBy":"172"},{"ruleId":"165","severity":1,"message":"173","line":49,"column":6,"nodeType":"167","endLine":49,"endColumn":18,"suggestions":"174"},{"ruleId":"165","severity":1,"message":"175","line":165,"column":6,"nodeType":"167","endLine":165,"endColumn":33,"suggestions":"176"},{"ruleId":"159","replacedBy":"177"},{"ruleId":"161","replacedBy":"178"},{"ruleId":"165","severity":1,"message":"179","line":81,"column":6,"nodeType":"167","endLine":81,"endColumn":14,"suggestions":"180"},{"ruleId":"159","replacedBy":"181"},{"ruleId":"161","replacedBy":"182"},{"ruleId":"155","severity":1,"message":"183","line":2,"column":19,"nodeType":"157","messageId":"158","endLine":2,"endColumn":25},{"ruleId":"165","severity":1,"message":"184","line":29,"column":6,"nodeType":"167","endLine":29,"endColumn":8,"suggestions":"185"},{"ruleId":"159","replacedBy":"186"},{"ruleId":"161","replacedBy":"187"},{"ruleId":"159","replacedBy":"188"},{"ruleId":"161","replacedBy":"189"},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["190"],"no-negated-in-lhs",["191"],["190"],["191"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'uploadRecipe'. Either include it or remove the dependency array.","ArrayExpression",["192"],["190"],["191"],["190"],["191"],"React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["193"],"React Hook useEffect has missing dependencies: 'countNutritionalFacts' and 'user'. Either include them or remove the dependency array.",["194"],["190"],["191"],"React Hook useEffect has a missing dependency: 'user.uid'. Either include it or remove the dependency array.",["195"],["190"],["191"],"'Switch' is defined but never used.","React Hook useEffect has missing dependencies: 'recipe.id' and 'recipeData'. Either include them or remove the dependency array. You can also do a functional update 'setRecipeData(r => ...)' if you only need 'recipeData' in the 'setRecipeData' call.",["196"],["190"],["191"],["190"],["191"],"no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},"Update the dependencies array to be: [coverPhotoUrl, uploadRecipe]",{"range":"207","text":"208"},"Update the dependencies array to be: [subProfile, userId]",{"range":"209","text":"210"},"Update the dependencies array to be: [countNutritionalFacts, recipe.authorId, recipeId, user]",{"range":"211","text":"212"},"Update the dependencies array to be: [user.uid, userId]",{"range":"213","text":"214"},"Update the dependencies array to be: [recipe.id, recipeData]",{"range":"215","text":"216"},[3554,3569],"[coverPhotoUrl, uploadRecipe]",[1520,1532],"[subProfile, userId]",[5074,5101],"[countNutritionalFacts, recipe.authorId, recipeId, user]",[2074,2082],"[user.uid, userId]",[891,893],"[recipe.id, recipeData]"]